plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    runs {
        // client or server both work
        client {
            if (project.hasProperty('mc_uuid')) {
                programArgs '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                programArgs '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                programArgs '--accessToken', project.getProperty('mc_accessToken')
            }
        }
    }

}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven {
        url = "https://minecraft.guntram.de/maven/"
    }

    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven { url "<https://maven.architectury.dev/>" }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    // Forge Config API Port
    modApi "net.minecraftforge:forgeconfigapiport-fabric:${rootProject.forge_config_api_port_version}"
    include "net.minecraftforge:forgeconfigapiport-fabric:${rootProject.forge_config_api_port_version}"

    // Roughly Enough Items
    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:$rei_version"
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:$rei_version"
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:$rei_version"


    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

sourceSets.main.resources {
    srcDir project(":forge").file("src/generated/resources").absolutePath
}

shadowJar {
    exclude "weeping_angels.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
    archiveClassifier = 'fabric'
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}


publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    repositories {
        // Add repositories to publish to here.
    }
}
